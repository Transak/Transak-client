#!/usr/bin/env node
"use strict";

var path = _interopRequireWildcard(require("path"));

var _util = require("util");

var babel = _interopRequireWildcard(require("@babel/core"));

var _babel = _interopRequireDefault(require("overdub/babel"));

var _npmPacklist = _interopRequireDefault(require("npm-packlist"));

var _createDir = _interopRequireDefault(require("../createDir"));

var _removeDir = _interopRequireDefault(require("../removeDir"));

var _readFile = _interopRequireDefault(require("../readFile"));

var _writeFile = _interopRequireDefault(require("../writeFile"));

var _copyFile = _interopRequireDefault(require("../copyFile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function currentScript() {
  return process.env.npm_lifecycle_event;
}

async function compileFile(filePath) {
  const {
    code
  } = await (0, _util.promisify)(babel.transformFile)(filePath, _babel.default);
  return code;
}

async function run() {
  const packageJson = JSON.parse((await (0, _readFile.default)(path.resolve('package.json'))));
  const usesFlow = 'flow-bin' in packageJson.devDependencies;

  if (currentScript() === 'prepack') {
    for (const filePath of await (0, _npmPacklist.default)()) {
      if (filePath.endsWith('.js')) {
        console.log(`Compiling ${filePath}`);

        if (usesFlow) {
          const contents = await (0, _readFile.default)(filePath);
          await (0, _writeFile.default)(`${filePath}.flow`, contents);
        }

        const compiledContents = await compileFile(filePath);
        await (0, _writeFile.default)(filePath, compiledContents);
      }
    }
  } else {
    const distPath = process.argv[2] || 'dist';
    await (0, _removeDir.default)(distPath);
    await (0, _createDir.default)(distPath);

    for (const filePath of await (0, _npmPacklist.default)()) {
      if (filePath.endsWith('.js')) {
        console.log(`Compiling ${filePath} => ${distPath}/${filePath}`);

        if (usesFlow) {
          const contents = await (0, _readFile.default)(filePath);
          await (0, _writeFile.default)(path.join(distPath, `${filePath}.flow`), contents);
        }

        const compiledContents = await compileFile(filePath);
        await (0, _writeFile.default)(path.join(distPath, filePath), compiledContents);
      } else {
        console.log(`Copying ${filePath} => ${distPath}/${filePath}`);
        await (0, _copyFile.default)(path.resolve(filePath), path.join(distPath, filePath));
      }
    }
  }
}

run();